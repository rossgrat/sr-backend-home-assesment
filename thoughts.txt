Timestamps are unreliable and could come unordered.

Provided Kafka and Zookeeper images do not work for ARM, using official Confluent images instead.

To increase throughput, partition on device id

TODO:
- Convert DB to timescale
- Implement go-migrate to create events table and set as HyperTable
- REST API endpoint to post event
- REST API endpoint to get timeline
- Mockery for mocks
- Unit tests
- Environment variables and env file
- Write readme explainer
    - Changes to original files
    - How to setup and run
    - Screenshot of Architecture
- Change compaction interval to be more often (max.compaction.lag.ms)
- Move worker schema to a better spot
- "Expect interfaces, return structs"



Future steps
- OTEL, logs, traces, metrics (especially throughput and response time percentiles)
- Scale up Kafka partitions, it is hard to move data to a different partition, can never downscale partitions
- All Kafka handlers are susceptible to the poison pill problem, this needs fixing
- waitForBrokers should be expanded to all workers, brokers may not be the same
- Broker strings should be checked to work with multiple brokers

Cameras track if a single device enters or exits.

State checking speeds
- New compacted topic for events, local cache client
- New compacted topic for events, redis cache


Can update the local cache only if the publication succeeds

Do we need sync.Map? No, because one consumer group per partiion