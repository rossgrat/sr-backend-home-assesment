// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package worker

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// ProcessMessage provides a mock function for the type MockProcessor
func (_mock *MockProcessor) ProcessMessage(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProcessor_ProcessMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessage'
type MockProcessor_ProcessMessage_Call struct {
	*mock.Call
}

// ProcessMessage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProcessor_Expecter) ProcessMessage(ctx interface{}) *MockProcessor_ProcessMessage_Call {
	return &MockProcessor_ProcessMessage_Call{Call: _e.mock.On("ProcessMessage", ctx)}
}

func (_c *MockProcessor_ProcessMessage_Call) Run(run func(ctx context.Context)) *MockProcessor_ProcessMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProcessor_ProcessMessage_Call) Return(err error) *MockProcessor_ProcessMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProcessor_ProcessMessage_Call) RunAndReturn(run func(ctx context.Context) error) *MockProcessor_ProcessMessage_Call {
	_c.Call.Return(run)
	return _c
}
