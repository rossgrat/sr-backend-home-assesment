// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package worker

import (
	"context"

	"github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReader
func (_mock *MockReader) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockReader_Expecter) Close() *MockReader_Close_Call {
	return &MockReader_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockReader_Close_Call) Run(run func()) *MockReader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_Close_Call) Return(err error) *MockReader_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReader_Close_Call) RunAndReturn(run func() error) *MockReader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Lag provides a mock function for the type MockReader
func (_mock *MockReader) Lag() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lag")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockReader_Lag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lag'
type MockReader_Lag_Call struct {
	*mock.Call
}

// Lag is a helper method to define mock.On call
func (_e *MockReader_Expecter) Lag() *MockReader_Lag_Call {
	return &MockReader_Lag_Call{Call: _e.mock.On("Lag")}
}

func (_c *MockReader_Lag_Call) Run(run func()) *MockReader_Lag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_Lag_Call) Return(n int64) *MockReader_Lag_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockReader_Lag_Call) RunAndReturn(run func() int64) *MockReader_Lag_Call {
	_c.Call.Return(run)
	return _c
}

// ReadMessage provides a mock function for the type MockReader
func (_mock *MockReader) ReadMessage(ctx context.Context) (kafka.Message, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 kafka.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (kafka.Message, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) kafka.Message); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(kafka.Message)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReader_ReadMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMessage'
type MockReader_ReadMessage_Call struct {
	*mock.Call
}

// ReadMessage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockReader_Expecter) ReadMessage(ctx interface{}) *MockReader_ReadMessage_Call {
	return &MockReader_ReadMessage_Call{Call: _e.mock.On("ReadMessage", ctx)}
}

func (_c *MockReader_ReadMessage_Call) Run(run func(ctx context.Context)) *MockReader_ReadMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockReader_ReadMessage_Call) Return(message kafka.Message, err error) *MockReader_ReadMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockReader_ReadMessage_Call) RunAndReturn(run func(ctx context.Context) (kafka.Message, error)) *MockReader_ReadMessage_Call {
	_c.Call.Return(run)
	return _c
}
