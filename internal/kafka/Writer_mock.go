// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package worker

import (
	"context"

	"github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWriter creates a new instance of MockWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWriter {
	mock := &MockWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWriter is an autogenerated mock type for the Writer type
type MockWriter struct {
	mock.Mock
}

type MockWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriter) EXPECT() *MockWriter_Expecter {
	return &MockWriter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWriter
func (_mock *MockWriter) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWriter_Expecter) Close() *MockWriter_Close_Call {
	return &MockWriter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWriter_Close_Call) Run(run func()) *MockWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWriter_Close_Call) Return(err error) *MockWriter_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWriter_Close_Call) RunAndReturn(run func() error) *MockWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// WriteMessages provides a mock function for the type MockWriter
func (_mock *MockWriter) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	var tmpRet mock.Arguments
	if len(msgs) > 0 {
		tmpRet = _mock.Called(ctx, msgs)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WriteMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...kafka.Message) error); ok {
		r0 = returnFunc(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWriter_WriteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessages'
type MockWriter_WriteMessages_Call struct {
	*mock.Call
}

// WriteMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs ...kafka.Message
func (_e *MockWriter_Expecter) WriteMessages(ctx interface{}, msgs ...interface{}) *MockWriter_WriteMessages_Call {
	return &MockWriter_WriteMessages_Call{Call: _e.mock.On("WriteMessages",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *MockWriter_WriteMessages_Call) Run(run func(ctx context.Context, msgs ...kafka.Message)) *MockWriter_WriteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []kafka.Message
		var variadicArgs []kafka.Message
		if len(args) > 1 {
			variadicArgs = args[1].([]kafka.Message)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockWriter_WriteMessages_Call) Return(err error) *MockWriter_WriteMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWriter_WriteMessages_Call) RunAndReturn(run func(ctx context.Context, msgs ...kafka.Message) error) *MockWriter_WriteMessages_Call {
	_c.Call.Return(run)
	return _c
}
