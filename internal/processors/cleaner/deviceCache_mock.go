// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cleaner

import (
	"sr-backend-home-assessment/internal/cache"

	mock "github.com/stretchr/testify/mock"
)

// NewMockdeviceCache creates a new instance of MockdeviceCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdeviceCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdeviceCache {
	mock := &MockdeviceCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockdeviceCache is an autogenerated mock type for the deviceCache type
type MockdeviceCache struct {
	mock.Mock
}

type MockdeviceCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdeviceCache) EXPECT() *MockdeviceCache_Expecter {
	return &MockdeviceCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockdeviceCache
func (_mock *MockdeviceCache) Get(s string) (cache.DeviceState, bool) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 cache.DeviceState
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (cache.DeviceState, bool)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) cache.DeviceState); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(cache.DeviceState)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockdeviceCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockdeviceCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - s string
func (_e *MockdeviceCache_Expecter) Get(s interface{}) *MockdeviceCache_Get_Call {
	return &MockdeviceCache_Get_Call{Call: _e.mock.On("Get", s)}
}

func (_c *MockdeviceCache_Get_Call) Run(run func(s string)) *MockdeviceCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockdeviceCache_Get_Call) Return(deviceState cache.DeviceState, b bool) *MockdeviceCache_Get_Call {
	_c.Call.Return(deviceState, b)
	return _c
}

func (_c *MockdeviceCache_Get_Call) RunAndReturn(run func(s string) (cache.DeviceState, bool)) *MockdeviceCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockdeviceCache
func (_mock *MockdeviceCache) Set(s string, deviceState cache.DeviceState) {
	_mock.Called(s, deviceState)
	return
}

// MockdeviceCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockdeviceCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - s string
//   - deviceState cache.DeviceState
func (_e *MockdeviceCache_Expecter) Set(s interface{}, deviceState interface{}) *MockdeviceCache_Set_Call {
	return &MockdeviceCache_Set_Call{Call: _e.mock.On("Set", s, deviceState)}
}

func (_c *MockdeviceCache_Set_Call) Run(run func(s string, deviceState cache.DeviceState)) *MockdeviceCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 cache.DeviceState
		if args[1] != nil {
			arg1 = args[1].(cache.DeviceState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockdeviceCache_Set_Call) Return() *MockdeviceCache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockdeviceCache_Set_Call) RunAndReturn(run func(s string, deviceState cache.DeviceState)) *MockdeviceCache_Set_Call {
	_c.Run(run)
	return _c
}
