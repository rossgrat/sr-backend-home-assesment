// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api

import (
	"context"
	"sr-backend-home-assessment/internal/db"

	mock "github.com/stretchr/testify/mock"
)

// NewMockrepository creates a new instance of Mockrepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockrepository {
	mock := &Mockrepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockrepository is an autogenerated mock type for the repository type
type Mockrepository struct {
	mock.Mock
}

type Mockrepository_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockrepository) EXPECT() *Mockrepository_Expecter {
	return &Mockrepository_Expecter{mock: &_m.Mock}
}

// CreateTimeline provides a mock function for the type Mockrepository
func (_mock *Mockrepository) CreateTimeline(context1 context.Context, deviceEvents []db.DeviceEvent) error {
	ret := _mock.Called(context1, deviceEvents)

	if len(ret) == 0 {
		panic("no return value specified for CreateTimeline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []db.DeviceEvent) error); ok {
		r0 = returnFunc(context1, deviceEvents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mockrepository_CreateTimeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeline'
type Mockrepository_CreateTimeline_Call struct {
	*mock.Call
}

// CreateTimeline is a helper method to define mock.On call
//   - context1 context.Context
//   - deviceEvents []db.DeviceEvent
func (_e *Mockrepository_Expecter) CreateTimeline(context1 interface{}, deviceEvents interface{}) *Mockrepository_CreateTimeline_Call {
	return &Mockrepository_CreateTimeline_Call{Call: _e.mock.On("CreateTimeline", context1, deviceEvents)}
}

func (_c *Mockrepository_CreateTimeline_Call) Run(run func(context1 context.Context, deviceEvents []db.DeviceEvent)) *Mockrepository_CreateTimeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []db.DeviceEvent
		if args[1] != nil {
			arg1 = args[1].([]db.DeviceEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Mockrepository_CreateTimeline_Call) Return(err error) *Mockrepository_CreateTimeline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mockrepository_CreateTimeline_Call) RunAndReturn(run func(context1 context.Context, deviceEvents []db.DeviceEvent) error) *Mockrepository_CreateTimeline_Call {
	_c.Call.Return(run)
	return _c
}

// LoadEventsBetween provides a mock function for the type Mockrepository
func (_mock *Mockrepository) LoadEventsBetween(context1 context.Context, s string, n int64, n1 int64) ([]db.DeviceEvent, error) {
	ret := _mock.Called(context1, s, n, n1)

	if len(ret) == 0 {
		panic("no return value specified for LoadEventsBetween")
	}

	var r0 []db.DeviceEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]db.DeviceEvent, error)); ok {
		return returnFunc(context1, s, n, n1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, int64) []db.DeviceEvent); ok {
		r0 = returnFunc(context1, s, n, n1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DeviceEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = returnFunc(context1, s, n, n1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockrepository_LoadEventsBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadEventsBetween'
type Mockrepository_LoadEventsBetween_Call struct {
	*mock.Call
}

// LoadEventsBetween is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - n int64
//   - n1 int64
func (_e *Mockrepository_Expecter) LoadEventsBetween(context1 interface{}, s interface{}, n interface{}, n1 interface{}) *Mockrepository_LoadEventsBetween_Call {
	return &Mockrepository_LoadEventsBetween_Call{Call: _e.mock.On("LoadEventsBetween", context1, s, n, n1)}
}

func (_c *Mockrepository_LoadEventsBetween_Call) Run(run func(context1 context.Context, s string, n int64, n1 int64)) *Mockrepository_LoadEventsBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Mockrepository_LoadEventsBetween_Call) Return(deviceEvents []db.DeviceEvent, err error) *Mockrepository_LoadEventsBetween_Call {
	_c.Call.Return(deviceEvents, err)
	return _c
}

func (_c *Mockrepository_LoadEventsBetween_Call) RunAndReturn(run func(context1 context.Context, s string, n int64, n1 int64) ([]db.DeviceEvent, error)) *Mockrepository_LoadEventsBetween_Call {
	_c.Call.Return(run)
	return _c
}
